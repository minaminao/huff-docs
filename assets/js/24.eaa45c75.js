(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{453:function(e,t,a){"use strict";a.r(t);var n=a(66),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"simple-storage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-storage"}},[e._v("#")]),e._v(" Simple Storage")]),e._v(" "),a("p",[e._v("これまでの 2 つの例では、calldata からバイトを切り出し、メモリに格納し、値を返すということを検討してきました。次に、すべてのEVM開発者が恐れているパズルの欠けた部分、ストレージに取り組みます。")]),e._v(" "),a("h2",{attrs:{id:"storage-in-huff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storage-in-huff"}},[e._v("#")]),e._v(" Storage in Huff")]),e._v(" "),a("p",[e._v("Huffは"),a("code",[e._v("FREE_STORAGE_POINTER()")]),e._v("キーワードを使ってストレージ変数の追跡を抽象化しているので、ストレージを扱うのはそれほど複雑ではありません。以下にその例を示します。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#define constant STORAGE_SLOT0 = FREE_STORAGE_POINTER()\n#define constant STORAGE_SLOT1 = FREE_STORAGE_POINTER()\n#define constant STORAGE_SLOT2 = FREE_STORAGE_POINTER()\n")])])]),a("p",[e._v("ストレージスロットは、コントラクトがその状態を保持する非常に大きな配列の単なるキーです。コンパイラはコンパイル時に"),a("code",[e._v("STORAGE_SLOT0")]),e._v("に"),a("code",[e._v("0")]),e._v("、"),a("code",[e._v("STORAGE_SLOT1")]),e._v("に"),a("code",[e._v("1")]),e._v("などの値を代入します。コード全体では、どの言語でも定数が使われるのと同じように、ストレージスロットを参照するだけです。")]),e._v(" "),a("h2",{attrs:{id:"setting-storage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setting-storage"}},[e._v("#")]),e._v(" Setting storage")]),e._v(" "),a("p",[e._v("まず、"),a("code",[e._v("FREE_STORAGE_POINTER()")]),e._v("キーワードを使用して、ストレージスロットを表す定数を定義します。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#define constant VALUE = FREE_STORAGE_POINTER()\n")])])]),a("p",[a("code",[e._v("[VALUE]")]),e._v("のように角括弧で囲むことで、コード全体でこのスロットを参照することができます。以下の例では、スロット [VALUE] に値 5 を格納するマクロを例示しています。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#define macro SET_5() = takes(0) returns(0) {\n    0x5             // [0x5] \n    [VALUE]         // [value_slot_pointer, 0x5]\n    sstore          // []\n}\n")])])]),a("p",[e._v("インタラクティブにテストする "),a("a",{attrs:{href:"https://www.evm.codes/playground?unit=Wei&codeType=Bytecode&code='6005600055'_",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(" ([VALUE]は0にハードコードされています)")]),e._v(" "),a("h2",{attrs:{id:"reading-from-storage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reading-from-storage"}},[e._v("#")]),e._v(" Reading from storage")]),e._v(" "),a("p",[e._v("これで、ストレージへの書き込み方法がわかったので、ストレージからの読み出しは簡単です。"),a("code",[e._v("sstore")]),e._v(" を "),a("code",[e._v("sload")]),e._v(" に置き換えるだけで、準備は完了です。これから、上の例を拡張して、ストレージへの書き込みと読み込みの両方を行うことにします。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#define macro SET_5_READ_5() = takes(0) returns(0) {\n    0x5\n    [VALUE]\n    sstore\n\n    [VALUE]\n    sload\n}\n")])])]),a("p",[e._v("いいねーもう一度、"),a("a",{attrs:{href:"https://www.evm.codes/playground?unit=Wei&codeType=Bytecode&code='6005600055600054'_",target:"_blank",rel:"noopener noreferrer"}},[e._v("evm.codes"),a("OutboundLink")],1),e._v(" でテストしてみましょう。"),a("code",[e._v("sload")]),e._v(" 命令を実行した後、スタック上に 5 が再び現れることに注目してください。")]),e._v(" "),a("h2",{attrs:{id:"simple-storage-implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-storage-implementation"}},[e._v("#")]),e._v(" Simple Storage Implementation")]),e._v(" "),a("p",[e._v("これでストレージへの読み書きができるようになったので、remix の有名な SimpleStorage スターターコントラクトを試してみましょう。")]),e._v(" "),a("p",[e._v("まず、インターフェイスを作成しましょう。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#define function setValue(uint256) nonpayable returns ()\n#define function getValue() nonpayable returns (uint256)\n")])])]),a("p",[e._v("次に、ストレージスロットを定義します。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#define constant VALUE = FREE_STORAGE_POINTER()\n")])])]),a("p",[e._v("さて、いよいよロジックです。addTwoの例で、"),a("code",[e._v("calldataload")]),e._v("オペコードを使って32バイトのチャンクでデータを読むことができたことを思い出してください。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#define macro SET_VALUE() = takes(0) returns(0) {\n    // Read uint256 from calldata, remember to read from byte 4 to allow for the function selector! \n    0x04            // [0x04]\n    calldataload    // [value]\n\n    // Get pointer and store\n    [VALUE]         // [value_ptr, value]\n    sstore          // []\n}\n")])])]),a("p",[e._v("これまでの例題を終えて、Huff の書き方がわかってきたと思います。このパターンは、独自のコントラクトを書くときに、calldata から値を読み、メモリやストレージに値を格納するときに非常によく使われます。")]),e._v(" "),a("p",[e._v("次は、格納されている値の読み出しです。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#define macro GET_VALUE() = takes(0) returns(0) {\n    // Read uint256 from storage\n    [VALUE]         // [value_ptr]\n    sload           // [value]\n\n    // Store the return value in memory\n    0x00            // [0x00, value]\n    mstore          // []\n\n    // Return the first 32 bytes of memory containing our uint256\n    0x20            // [0x20]\n    0x00            // [0x00, 0x20]\n    return          // []\n}\n")])])]),a("p",[e._v("まず、先ほどの例と同様の手法で記憶値を読み取ります。戻り値をメモリに格納して準備します。そして、その値をメモリから返します。まとまってきましたね〜。")]),e._v(" "),a("p",[e._v("外部関数から新しいマクロを呼び出すには、ディスパッチャを作成する必要があります。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("#define macro MAIN() = takes(0) returns(0) {\n    \n    // Get the function selector\n    0x00 calldataload 0xe0 shr\n\n    dup1 0x55241077 eq setValue jumpi // Compare function selector to setValue(uint256)\n    dup1 0x20965255 eq getValue jumpi // Compare the function selector to getValue()\n\n    // dispatch\n    setValue:\n        SET_VALUE()\n    getValue:\n        GET_VALUE()\n\n    0x00 0x00 revert\n}\n")])])]),a("p",[e._v("今度は全部一緒に!")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Interface\n#define function setValue(uint256) nonpayable returns ()\n#define function getValue() nonpayable returns (uint256)\n\n// Storage\n#define constant VALUE = FREE_STORAGE_POINTER()\n\n// External function macros\n\n// setValue(uint256)\n#define macro SET_VALUE() = takes(0) returns(0) {\n    // Read uint256 from calldata, remember to read from byte 4 to allow for the function selector! \n    0x04            // [0x04]\n    calldataload    // [value]\n\n    // Get pointer and store\n    [VALUE]         // [value_ptr, value]\n    sstore          // []\n}\n\n// getValue()\n#define macro GET_VALUE() = takes(0) returns(0) {\n    // Read uint256 from storage\n    [VALUE]         // [value_ptr]\n    sload           // [value]\n\n    // Store the return value in memory\n    0x00            // [0x00, value]\n    mstore          // []\n\n    // Return the first 32 bytes of memory containing our uint256\n    0x20            // [0x20]\n    0x00            // [0x00, 0x20]\n    return          // []\n}\n\n// Main\n#define macro MAIN() = takes(0) returns(0) {\n    // Get the function selector\n    0x00 calldataload 0xe0 shr\n\n    dup1 __FUNC_SIG(setValue) eq setValue jumpi // Compare function selector to setValue(uint256)\n    dup1 __FUNC_SIG(getValue) eq getValue jumpi // Compare the function selector to getValue()\n\n    // dispatch\n    setValue:\n        SET_VALUE()\n    getValue:\n        GET_VALUE()\n\n    0x00 0x00 revert\n}\n")])])]),a("p",[e._v('おめでとうございます。あなたは、Huffでコントラクトを書くための殻を乗り越えたのです。次のステップとしては、addTwo, "Hello, World!", SimpleStorageでこれまでに学んだことを、'),a("a",{attrs:{href:"https://docs.huff.sh/tutorial/huff-testing/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Foundry"),a("OutboundLink")],1),e._v("のようなテストフレームワークに取り入れることをお勧めします。それでは、ハッキングを楽しんでください。")])])}),[],!1,null,null,null);t.default=r.exports}}]);